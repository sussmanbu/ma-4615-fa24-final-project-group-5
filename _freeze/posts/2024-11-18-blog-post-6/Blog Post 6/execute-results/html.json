{
  "hash": "cda11b0d1eab9482824a87c45eab00a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Blog Post 6\"\nauthor: \"Group 5\" \ndate: \"2024-11-18\"\ndate-modified: \"2024-11-18\"\ndraft: FALSE\n---\n\n\nThis week, we cleaned and loaded a dataset closely associated with our employment statistics with racial breakdowns. This new dataset contains many of the NAICS job codes contained in our original dataset, and matched them with wages statistics from the past couple months. For the purposes of our analysis this week, I've only looked at the October 2023 data.\n\nProcessing the data took rather extensive cleanup, requiring a conversion of the Department of Labor's table into a CSV file, which we did by writing a python HTML web parsing script that could read in the values to a workable CSV file. Then, it was a matter of matching the data, linked by their NAICS codes, to our existing datasets. Once this was accomplished, we were able to perform some rudimentary analysis, seeing some quick breakdowns of wage statistics by the various job categories.\n\nFor future weeks, we would like to see how this data by job category varies for race and gender, incorporating the other timestamps for average wages to see if wages across jobs and race and gender have changed over time. From this, we might be able to discover things like whether or not wage increases are equally distributed, and how they compare against inflation in the same time period.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#load in our wage data!\n\nwage_data <- read.csv(\"dataset/wage_data.csv\")\n\n# Preview the dataset\nsaveRDS(wage_data, file = \"dataset/wage_data.rds\")\nhead(wage_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                          Industry X2022.NAICS.code Oct..2023\n1                                       Logging(1)             1133     31.20\n2 Mining, quarrying, and oil and gas extraction(1)               21     39.19\n3                        Oil and gas extraction(1)              211     49.38\n4                   Mining (except oil and gas)(1)              212     35.75\n5                                   Coal mining(1)             2121     38.80\n6                              Metal ore mining(1)             2122     43.23\n  Aug..2024 Sept..2024.p. Oct..2024.p. Oct..2023_2 Aug..2024_2 Sept..2024.p._2\n1     31.21         31.58            0     1347.84     1367.00         1332.68\n2     40.23         40.39            0     1755.71     1798.28         1809.47\n3     47.92         47.94            0     2044.33     2046.18         2042.24\n4     37.25         37.30            0     1583.73     1665.08         1671.04\n5     41.86         42.03            0     1843.00     1933.93         1950.19\n6     43.80         43.87            0     1794.05     1870.26         1855.70\n  Oct..2024.p._2\n1              0\n2              0\n3              0\n4              0\n5              0\n6              0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#colnames(wage_data)\n#print(wage_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Load the datasets\nCleaned_Employment2017 <- readRDS(\"dataset/Employment2017.rds\")\nwage_data <- readRDS(\"dataset/wage_data.rds\")\n\n# Step 2: Ensure column names are consistent\n# Rename columns if necessary for easier comparison\ncolnames(wage_data) <- gsub(\"\\\\.\", \"\", colnames(wage_data)) # Remove periods if they exist in column names\n\n# Step 3: Match NAICS codes and merge datasets\n# Match Cleaned_Employment2017$NAICS3 with wage_data$X2022NAICScode\nCleaned_Employment2017$`Oct2023 wages` <- ifelse(\n  Cleaned_Employment2017$NAICS3 %in% wage_data$X2022NAICScode,\n  wage_data$Oct2023[match(Cleaned_Employment2017$NAICS3, wage_data$X2022NAICScode)],\n  NA\n)\n\n# Step 4: Save the updated dataset\n#saveRDS(Cleaned_Employment2017, \"dataset/Updated_Cleaned_Employment2017.rds\")\n\n# Optional: Preview the updated dataset\n#print(Cleaned_Employment2017)\n\ndata2017WithWages <- Cleaned_Employment2017[!is.na(Cleaned_Employment2017$`Oct2023 wages`), ]\n\n# Step 5: Save the new table\nsaveRDS(data2017WithWages, \"dataset/2017WithWages.rds\")\n\n# Optional: Preview the filtered table\n#print(data2017WithWages)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\n# Subset relevant columns\ncols <- grep(\"^(WHT|BLKT|HISPT|ASIANT|AIANT|NHOPIT|TOMRT)(10)?$\", names(data2017WithWages), value = TRUE)\ndata2017WithWages[cols] <- lapply(data2017WithWages[cols], function(col) as.numeric(as.character(col)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create the new dataset with selected columns\nnew_data <- data2017WithWages %>%\n  select(NAICS2_Name, NAICS2, `Oct2023 wages`, all_of(cols))\n\n# Aggregate the data\naggregated_data <- new_data %>%\n  group_by(NAICS2_Name) %>%\n  summarize(\n    Avg_Wage = mean(`Oct2023 wages`, na.rm = TRUE),\n    across(all_of(cols), sum, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `summarize()`.\nℹ In argument: `across(all_of(cols), sum, na.rm = TRUE)`.\nℹ In group 1: `NAICS2_Name = \"Accommodation and Food Services\"`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n```\n\n\n:::\n\n```{.r .cell-code}\n# Load ggplot2 for visualization\nlibrary(ggplot2)\naggregated_data$NAICS2_Name <- factor(aggregated_data$NAICS2_Name, levels = unique(aggregated_data$NAICS2_Name))\n# Create the bar chart\nggplot(aggregated_data, aes(x = reorder(NAICS2_Name, Avg_Wage), y = Avg_Wage)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip coordinates for better readability\n  labs(\n    title = \"Average Wages by NAICS2_Name\",\n    x = \"NAICS2_Name\",\n    y = \"Average Wage (Oct 2023)\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Blog-Post-6_files/figure-html/p4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate the data by NAICS3_Name\naggregated_data_naics3 <- data2017WithWages %>%\n  select(NAICS3_Name, NAICS2, `Oct2023 wages`, all_of(cols)) %>%\n  group_by(NAICS3_Name) %>%\n  summarize(\n    Avg_Wage = mean(`Oct2023 wages`, na.rm = TRUE),  # Average wages\n    across(all_of(cols), sum, na.rm = TRUE)          # Sum racial category columns\n  )\n\n\n# Convert NAICS3_Name to a factor to ensure all are displayed\naggregated_data_naics3$NAICS3_Name <- factor(aggregated_data_naics3$NAICS3_Name, levels = unique(aggregated_data_naics3$NAICS3_Name))\n\n# Create the bar chart\nggplot(aggregated_data_naics3, aes(x = reorder(NAICS3_Name, Avg_Wage), y = Avg_Wage)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip coordinates for better readability\n  labs(\n    title = \"Average Wages by NAICS3_Name\",\n    x = \"NAICS3_Name\",\n    y = \"Average Wage (Oct 2023)\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 8)  # Adjust text size for clarity\n  )\n```\n\n::: {.cell-output-display}\n![](Blog-Post-6_files/figure-html/p5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Blog-Post-6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}